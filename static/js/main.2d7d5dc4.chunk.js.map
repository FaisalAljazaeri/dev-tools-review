{"version":3,"sources":["components/EditReviewForm.js","components/ReviewModal.js","components/Review.js","components/ReviewsContainer.js","components/AddReviewForm.js","components/ReviewsControlModal.js","components/UserControls.js","App.js","serviceWorker.js","index.js"],"names":["EditReviewForm","props","changehandler","e","setState","target","name","value","submitHandler","preventDefault","editReview","state","_id","review","itemName","content","itemImgSrc","Form","onSubmit","this","FormGroup","Label","Input","type","placeholder","onChange","Button","color","Component","ReviewModal","toggle","isOpen","toggleDelete","modalType","toggleEdit","toggleGithub","deleteReview","getModalHeader","getModalBody","githubReposCount","getModalFooter","onClick","modalBody","modalFooter","modalHeader","className","id","Modal","ModalHeader","ModalBody","ModalFooter","axios","get","then","res","data","total_count","catch","err","console","log","Review","recommendationIconClasses","isRecommended","src","alt","reviewId","toggleRecommended","ReviewsContainer","allReviews","reviews","map","index","key","AddReviewForm","createReview","toggleAll","ReviewsControlModal","addReview","deleteAllReviews","deleteNotRecommendedReviews","bodyContent","footerContent","getFooterContent","nestedModal","toggleNested","onClosed","closeAll","undefined","UserControls","toggleAddReview","nestedModalType","toggleDeleteAllReviews","toggleDeleteNotRecommendedReviews","App","post","updatedReview","updateReview","patch","reviewsCopy","indexOfReviewToUpdate","findIndex","splice","delete","newReviews","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2d7d5dc4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\n\nclass EditReviewForm extends Component {\n    constructor(props) {\n        super(props);\n\n        const { itemName, content, itemImgSrc } = this.props.review;\n\n        this.state = {\n            itemName,\n            content,\n            itemImgSrc\n        };\n    }\n\n    changehandler = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    submitHandler = e => {\n        e.preventDefault();\n        this.props.editReview({ ...this.state, _id: this.props.review._id });\n    };\n\n    render() {\n        return (\n            <Form onSubmit={this.submitHandler}>\n                <FormGroup>\n                    <Label>Item Name</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"itemName\"\n                        placeholder=\"item name\"\n                        onChange={this.changehandler}\n                        value={this.state.itemName}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Review Content</Label>\n                    <Input\n                        type=\"textarea\"\n                        name=\"content\"\n                        placeholder=\"Review Content\"\n                        onChange={this.changehandler}\n                        value={this.state.content}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Image Src</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"itemImgSrc\"\n                        placeholder=\"Image Src\"\n                        onChange={this.changehandler}\n                        value={this.state.itemImgSrc}\n                    />\n                </FormGroup>\n                <Button type=\"submit\" color=\"primary\">\n                    Submit\n                </Button>\n            </Form>\n        );\n    }\n}\n\nexport default EditReviewForm;\n","import React, { Component } from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport EditReviewForm from \"./EditReviewForm\";\nimport axios from \"axios\";\n\nclass ReviewModal extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false,\n            modalType: \"\",\n            githubReposCount: 0\n        };\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    };\n\n    toggleDelete = () => {\n        this.setState({\n            modalType: \"delete\"\n        });\n\n        this.toggle();\n    };\n\n    toggleEdit = () => {\n        this.setState({\n            modalType: \"edit\"\n        });\n\n        this.toggle();\n    };\n\n    toggleGithub = () => {\n        this.setState({\n            modalType: \"github\"\n        });\n\n        this.toggle();\n    };\n\n    deleteReview = e => {\n        this.props.deleteReview(this.props.review._id);\n        this.toggle();\n    };\n\n    editReview = review => {\n        this.props.editReview(review);\n        this.toggle();\n    };\n\n    getModalHeader = modalType => {\n        if (modalType === \"delete\") {\n            return \"Deleting Selected Item\";\n        } else if (modalType === \"edit\") {\n            return \"Editing Selected Review\";\n        } else if (modalType === \"github\") {\n            return \"Github Stats\";\n        } else {\n            return \"\";\n        }\n    };\n\n    getModalBody = modalType => {\n        if (modalType === \"delete\") {\n            return \"Are you sure you want to delete?\";\n        } else if (modalType === \"edit\") {\n            return (\n                <EditReviewForm\n                    review={this.props.review}\n                    editReview={this.editReview}\n                />\n            );\n        } else if (modalType === \"github\") {\n            return `Total Repositories on Github for ${this.props.review.itemName} is ${this.state.githubReposCount}`;\n        } else {\n            return \"\";\n        }\n    };\n\n    getModalFooter = modalType => {\n        if (modalType === \"delete\") {\n            return (\n                <Button color=\"danger\" onClick={this.deleteReview}>\n                    Delete\n                </Button>\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    render() {\n        const modalBody = this.getModalBody(this.state.modalType);\n        const modalFooter = this.getModalFooter(this.state.modalType);\n        const modalHeader = this.getModalHeader(this.state.modalType);\n\n        return (\n            <div>\n                <i className=\"fa fa-github fa-lg\" onClick={this.toggleGithub} />\n                <i\n                    className=\"fa fa-trash fa-lg red\"\n                    onClick={this.toggleDelete}\n                />\n                <i\n                    className=\"fa fa-edit fa-lg blue\"\n                    id=\"edit-icon\"\n                    onClick={this.toggleEdit}\n                />\n                <Modal isOpen={this.state.isOpen} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>\n                        {modalHeader}\n                    </ModalHeader>\n                    <ModalBody>{modalBody}</ModalBody>\n                    <ModalFooter>\n                        {modalFooter}{\" \"}\n                        <Button color=\"secondary\" onClick={this.toggle}>\n                            Cancel\n                        </Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        axios\n            .get(\n                `https://api.github.com/search/repositories?q=${this.props.review.itemName}`\n            )\n            .then(res =>\n                this.setState({\n                    githubReposCount: res.data.total_count\n                })\n            )\n            .catch(err => console.log(err));\n    }\n}\n\nexport default ReviewModal;\n","import React from \"react\";\nimport \"./Review.css\";\nimport ReviewModal from \"./ReviewModal\";\n\nfunction Review(props) {\n    const { itemName, content, itemImgSrc, isRecommended } = props.review;\n\n    const recommendationIconClasses = isRecommended\n        ? \"fa fa-thumbs-up fa-lg like\"\n        : \"fa fa-thumbs-down fa-lg dislike\";\n\n    const toggleRecommended = e => {\n        props.toggleRecommended(props.review);\n    };\n\n    const deleteReview = reviewId => {\n        props.deleteReview(reviewId);\n    };\n\n    const editReview = review => {\n        props.editReview(review);\n    };\n\n    return (\n        <div className=\"review-card\">\n            <div className=\"img-container\">\n                <img src={itemImgSrc} alt={itemName} />\n            </div>\n            <div className=\"card-body\">\n                <div className=\"review-content\">\n                    <h3>{itemName}</h3>\n                    <p>{content}</p>\n                </div>\n\n                <div className=\"review-controls\">\n                    <ReviewModal\n                        editReview={editReview}\n                        deleteReview={deleteReview}\n                        review={props.review}\n                    />\n                    <i\n                        className={recommendationIconClasses}\n                        onClick={toggleRecommended}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Review;\n","import React, { Component } from \"react\";\nimport \"./ReviewsContainer.css\";\nimport Review from \"./Review\";\n\nclass ReviewsContainer extends Component {\n    deleteReview = reviewId => {\n        this.props.deleteReview(reviewId);\n    };\n\n    toggleRecommended = review => {\n        this.props.toggleRecommended(review);\n    };\n\n    editReview = review => {\n        this.props.editReview(review);\n    };\n\n    render() {\n        const allReviews = this.props.reviews.map((review, index) => {\n            return (\n                <Review\n                    key={index}\n                    review={review}\n                    deleteReview={this.props.deleteReview}\n                    toggleRecommended={this.toggleRecommended}\n                    editReview={this.editReview}\n                />\n            );\n        });\n        return <div className=\"reviews-container\">{allReviews}</div>;\n    }\n}\n\nexport default ReviewsContainer;\n","import React, { Component } from \"react\";\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\n\nclass AddReviewForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            itemName: \"\",\n            content: \"\",\n            itemImgSrc: \"\",\n            isRecommended: false\n        };\n    }\n\n    changehandler = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    submitHandler = e => {\n        e.preventDefault();\n        this.props.createReview(this.state);\n        this.props.toggleAll();\n    };\n\n    render() {\n        return (\n            <Form onSubmit={this.submitHandler}>\n                <FormGroup>\n                    <Label>Item Name</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"itemName\"\n                        placeholder=\"item name\"\n                        onChange={this.changehandler}\n                        value={this.state.itemName}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Review Content</Label>\n                    <Input\n                        type=\"textarea\"\n                        name=\"content\"\n                        placeholder=\"Review Content\"\n                        onChange={this.changehandler}\n                        value={this.state.content}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Image Src</Label>\n                    <Input\n                        type=\"text\"\n                        name=\"itemImgSrc\"\n                        placeholder=\"Image Src\"\n                        onChange={this.changehandler}\n                        value={this.state.itemImgSrc}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label>Do You Recommend It?</Label>\n                    <Input\n                        type=\"select\"\n                        name=\"isRecommended\"\n                        onChange={this.changehandler}\n                        value={this.state.isRecommended}\n                    >\n                        <option value={false}>No</option>\n                        <option value={true}>Yes</option>\n                    </Input>\n                </FormGroup>\n                <Button type=\"submit\" color=\"primary\">\n                    Submit\n                </Button>\n            </Form>\n        );\n    }\n}\n\nexport default AddReviewForm;\n","import React from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport AddReviewForm from \"./AddReviewForm\";\n\nfunction ReviewsControlModal(props) {\n    const addReview = review => {\n        props.addReview(review);\n    };\n\n    const deleteAllReviews = () => {\n        props.deleteAllReviews();\n        props.toggleAll();\n    };\n\n    const deleteNotRecommendedReviews = () => {\n        props.deleteNotRecommendedReviews();\n        props.toggleAll();\n    };\n\n    const getBodyContent = modalType => {\n        if (modalType === \"add\") {\n            return (\n                <AddReviewForm\n                    createReview={addReview}\n                    toggleAll={props.toggleAll}\n                />\n            );\n        } else if (modalType === \"deleteAll\") {\n            return <div>are you sure you want to delete all items?</div>;\n        } else {\n            return (\n                <div>\n                    are you sure you want to delete not recommended items?\n                </div>\n            );\n        }\n    };\n\n    const getFooterContent = modalType => {\n        if (modalType === \"deleteNotRecommended\") {\n            return (\n                <Button color=\"danger\" onClick={deleteNotRecommendedReviews}>\n                    Confirm\n                </Button>\n            );\n        } else if (modalType === \"deleteAll\") {\n            return (\n                <Button color=\"danger\" onClick={deleteAllReviews}>\n                    Confirm\n                </Button>\n            );\n        } else {\n            return \"\";\n        }\n    };\n\n    const bodyContent = getBodyContent(props.modalType);\n    const footerContent = getFooterContent(props.modalType);\n\n    return (\n        <Modal\n            isOpen={props.nestedModal}\n            toggle={props.toggleNested}\n            onClosed={props.closeAll ? props.toggle : undefined}\n        >\n            <ModalHeader>Nested Modal title</ModalHeader>\n            <ModalBody>{bodyContent}</ModalBody>\n            <ModalFooter>\n                {footerContent}{\" \"}\n                <Button color=\"secondary\" onClick={props.toggleNested}>\n                    Cancel\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n\nexport default ReviewsControlModal;\n","import React, { Component } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport \"./UserControls.css\";\nimport ReviewsControlModal from \"./ReviewsControlModal\";\n\nclass UserControls extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpen: false,\n            nestedModal: false,\n            closeAll: false,\n            nestedModalType: \"\"\n        };\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    };\n\n    toggleNested = () => {\n        this.setState({\n            nestedModal: !this.state.nestedModal,\n            closeAll: false\n        });\n    };\n\n    toggleAll = () => {\n        this.setState({\n            nestedModal: !this.state.nestedModal,\n            closeAll: true\n        });\n    };\n\n    toggleAddReview = () => {\n        this.toggleNested();\n        this.setState({\n            nestedModalType: \"add\"\n        });\n    };\n\n    addReview = review => {\n        this.props.addReview(review);\n    };\n\n    toggleDeleteAllReviews = () => {\n        this.toggleNested();\n        this.setState({\n            nestedModalType: \"deleteAll\"\n        });\n    };\n\n    deleteAllReviews = () => {\n        this.props.deleteAllReviews();\n    };\n\n    toggleDeleteNotRecommendedReviews = () => {\n        this.toggleNested();\n        this.setState({\n            nestedModalType: \"deleteNotRecommended\"\n        });\n    };\n\n    deleteNotRecommendedReviews = () => {\n        this.props.deleteNotRecommendedReviews();\n    };\n\n    render() {\n        return (\n            <div>\n                <i\n                    id=\"action-btn\"\n                    className=\"fa fa-cog fa-2x\"\n                    onClick={this.toggle}\n                />\n\n                <Modal isOpen={this.state.isOpen} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>\n                        Select an Action to Perform\n                    </ModalHeader>\n                    <ModalBody>\n                        <div className=\"modal-buttons\">\n                            <Button\n                                color=\"success\"\n                                onClick={this.toggleAddReview}\n                            >\n                                Add Review\n                            </Button>\n                            <Button\n                                color=\"secondary\"\n                                onClick={this.toggleDeleteNotRecommendedReviews}\n                            >\n                                Delete All Not Recommended Reviews\n                            </Button>\n                            <Button\n                                color=\"danger\"\n                                onClick={this.toggleDeleteAllReviews}\n                            >\n                                Delete All Reviews\n                            </Button>\n                        </div>\n                        <ReviewsControlModal\n                            addReview={this.addReview}\n                            deleteAllReviews={this.deleteAllReviews}\n                            deleteNotRecommendedReviews={\n                                this.deleteNotRecommendedReviews\n                            }\n                            modalType={this.state.nestedModalType}\n                            nestedModal={this.state.nestedModal}\n                            toggle={this.toggle}\n                            toggleNested={this.toggleNested}\n                            toggleAll={this.toggleAll}\n                            closeAll={this.state.closeAll}\n                        />\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"secondary\" onClick={this.toggle}>\n                            Cancel\n                        </Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}\nexport default UserControls;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport ReviewsContainer from \"./components/ReviewsContainer\";\nimport UserControls from \"./components/UserControls\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            reviews: []\n        };\n    }\n\n    addReview = review => {\n        axios\n            .post(\"http://localhost:5000/api/reviews\", review)\n            .then(res => {\n                this.setState({\n                    reviews: [...this.state.reviews, res.data.review]\n                });\n            })\n            .catch(err => console.log(err));\n    };\n\n    toggleRecommended = review => {\n        const updatedReview = {\n            ...review,\n            isRecommended: !review.isRecommended\n        };\n\n        this.updateReview(updatedReview);\n    };\n\n    editReview = updatedReview => {\n        this.updateReview(updatedReview);\n    };\n\n    updateReview = updatedReview => {\n        axios\n            .patch(`http://localhost:5000/api/reviews/${updatedReview._id}`, {\n                review: updatedReview\n            })\n            .then(res => {\n                const reviewsCopy = [...this.state.reviews];\n                const indexOfReviewToUpdate = reviewsCopy.findIndex(\n                    review => updatedReview._id === review._id\n                );\n\n                reviewsCopy.splice(indexOfReviewToUpdate, 1, res.data);\n\n                this.setState({\n                    reviews: reviewsCopy\n                });\n            })\n            .catch(err => console.log(err));\n    };\n\n    deleteAllReviews = () => {\n        axios\n            .delete(\"http://localhost:5000/api/reviews\")\n            .then(res => {\n                this.setState({\n                    reviews: res.data\n                });\n            })\n            .catch(err => console.log(err));\n    };\n\n    deleteNotRecommendedReviews = () => {\n        axios\n            .delete(\"http://localhost:5000/api/reviews/notrecommended\")\n            .then(res => {\n                this.setState({\n                    reviews: res.data\n                });\n            })\n            .catch(err => console.log(err));\n    };\n\n    deleteReview = reviewId => {\n        axios\n            .delete(`http://localhost:5000/api/reviews/${reviewId}`)\n            .then(res => {\n                const newReviews = [...this.state.reviews].filter(\n                    review => reviewId !== review._id\n                );\n\n                this.setState({\n                    reviews: newReviews\n                });\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"main-container\">\n                <UserControls\n                    addReview={this.addReview}\n                    deleteAllReviews={this.deleteAllReviews}\n                    deleteNotRecommendedReviews={\n                        this.deleteNotRecommendedReviews\n                    }\n                />\n\n                <ReviewsContainer\n                    reviews={this.state.reviews}\n                    deleteReview={this.deleteReview}\n                    toggleRecommended={this.toggleRecommended}\n                    editReview={this.editReview}\n                />\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        axios\n            .get(\"http://localhost:5000/api/reviews\")\n            .then(res => {\n                this.setState({\n                    reviews: res.data\n                });\n            })\n            .catch(err => console.log(err));\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}